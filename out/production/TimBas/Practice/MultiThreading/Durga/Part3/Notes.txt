Defining a Thread by implementing Runnable Interface :
-------------------------------------------------------
1) As we know Thread-class also implements Runnable-Interface.
2) Instead of extending a Thread-class, we can also directly implement Runnable Interface to define a thread.
3) Runnable interface present in java.lang package, and it contains only one method i.e. run() method.
4) Refer Example-1 java program for understanding above points.


Case-Study :
-----------------
                    MyRunnable r = new MyRunnable();
                    Thread t1 = new Thread();
                    Thread t2 = new Thread(r);

    Case1 : t1.start(); -----> "A new thread will be created and which is responsible for execution of Thread-class run()
                                which has empty implementation."

    Case 2 : t1.run(); -------> "No new thread will be created and Thread class run() will be executed, just like normal method call"

    Case 3 : t2.start(); ------> "A new thread will be created and which is responsible for execution of MyRunnable-class run()
                                  which has job to do."

    Case 4 : t2.run();----> "No new thread will be created and MyRunnable class run() will be executed, just like normal method call"

    Case 5 : r.start(); ---> "Compile-time-error, saying MyRunnable class doesn't have start() method in it."

    Case 6 : r.run(); ----> "No new thread will be created and MyRunnable class run() will be executed, just like normal method call"


Among 2 which one is best to create a Thread :
-----------------------------------------------
"Implements Runnable-Interface is always recommended defining a thread."
   Reason :
   ---------
   By implementing Runnable Interface we can extend one more class,
                        But
   If we extend a Thread-class, we cannot extend one more class, and we are loosing inheritance chance in this approach.

 "Hence to create a thread, Implements Runnable Interface is always recommended."


 Constructors in Thread-class : total 8 are there
 ------------------------------------

 1) Thread t = new Thread();

 2) Thread t =new Thread(Runnable r);

 3) Thread t = new Thread(String name);

 4) Thread t = new Thread(Runnable r, String name);

 5) Thread t = new Thread(ThreadGroup tg, String name);

 6) Thread t = new Thread(ThreadGroup tg, Runnable r);

 7) Thread t = new Thread(ThreadGroup tg, Runnable r, String name);

 8) Thread t = new Thread(ThreadGroup tg, Runnable r, String name, long stackSize);


Naming threads :
-----------------------

Every thread in java has some name, it maybe default-name generated by JVM OR Customized name provided by Programmer.

Methods() to get&set thread's names :
------------------------------------------
 1) Thread.currentThread.getName()
 2) Thread t = new Thread();
        t.getName();
 3) Thread.currentThread.setName("Ahsan Shareef");
 4)Thread t = new Thread();
        t.setName("Zaid")

 5) Refer Example-2 java program.

Note : How to get current thread object name : Refer Example-3 java program.


