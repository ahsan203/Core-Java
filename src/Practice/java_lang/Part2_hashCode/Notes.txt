hashCode() :
-------------
1) For every object in java a unique number is generated by JVM, which is nothing but "hashCode".
2) hashCode won't represent address of object.
3) JVM will use hashCode while saving object's into Hashing related Data-Structures like :
                                                                                            1) HashSet
                                                                                            2) HashTable
                                                                                            3) HashMap .....

4) The main advantage of saving objects based on hashCode is, search-operation will become easy.
   The most powerful searching-algorithm till today is "Hashing-Algorithm".
   TimeComplexity of Hashing is O(1).
   TimeComplexity of BinarySearch is O(log n) base 2
   TimeComplexity of LinearSearch is O(n).

5) If we don't override hashCode() method, then Object-class hashCode() method will execute. and
   Object-class hashCode() method will generate hashCode based on "Address of the object".
   It doesn't mean hashCode represent address of the object.
   Based on our requirement we can override hashCode() method in our class to generate our own hashCodes.

6) @overriding  hashCode() method is said to be proper if-and-only-if, for every object we have generated a
   unique number,as hashCode.
   Refer Example-1 java program where hashCode has been generating based on roll-numbers.


toString() vs hashCode() :
-----------------------------
1) If we are giving a chance to Object-class toString() method, it will internally call hashCode() method of Object-class.
-> As we already know the implementation of toString() method of Object-class, where internally it is calling hashCode().

-> And we try to print the object without overriding toString() then the output we get in below default format:
toString() will return getClass().getName()+"@"+Integer.toHexString(hashCode());

2)   If we are overriding toString() method, then our toString() method will not call Object-class hashCode().
                             BUT
    If we are overriding both toString() and hashCode() in our class,
    then the overridden toString() will call the overridden hashCode() only
    if we explicitly call hashCode() in our overridden toString().

3) If we don't override toString()
         but
   we have overridden hashCode().
   When we print object of the class in that case toString() of Object-class will call our overridden hashCode().